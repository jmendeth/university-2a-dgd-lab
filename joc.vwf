/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 26200.0;
	SIMULATION_TIME = 26200.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 1310.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("comp")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 3;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("comp[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "comp";
}

SIGNAL("comp[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "comp";
}

SIGNAL("comp[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "comp";
}

SIGNAL("keycode")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("keycode[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode";
}

SIGNAL("keycode[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode";
}

SIGNAL("keycode[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode";
}

SIGNAL("keycode[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "keycode";
}

SIGNAL("nkey")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("nrst")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("num")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 12;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("num[11]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "num";
}

SIGNAL("num[10]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "num";
}

SIGNAL("num[9]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "num";
}

SIGNAL("num[8]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "num";
}

SIGNAL("num[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "num";
}

SIGNAL("num[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "num";
}

SIGNAL("num[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "num";
}

SIGNAL("num[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "num";
}

SIGNAL("num[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "num";
}

SIGNAL("num[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "num";
}

SIGNAL("num[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "num";
}

SIGNAL("num[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "num";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 20;
			LEVEL 0 FOR 655.0;
			LEVEL 1 FOR 655.0;
		}
	}
}

TRANSITION_LIST("comp[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 12451.655;
		LEVEL 0 FOR 13748.345;
	}
}

TRANSITION_LIST("comp[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 12453.459;
		LEVEL 0 FOR 13746.541;
	}
}

TRANSITION_LIST("comp[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 12452.256;
		LEVEL 0 FOR 5240.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 7197.744;
	}
}

TRANSITION_LIST("keycode[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 2620.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 7860.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 2620.0;
		LEVEL 1 FOR 3930.0;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 3930.0;
	}
}

TRANSITION_LIST("keycode[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 11790.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 3930.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 2620.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 3930.0;
	}
}

TRANSITION_LIST("keycode[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 9170.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 3930.0;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 2620.0;
	}
}

TRANSITION_LIST("keycode[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 3930.0;
		LEVEL 0 FOR 7860.0;
		LEVEL 1 FOR 5240.0;
		LEVEL 0 FOR 2620.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 5240.0;
	}
}

TRANSITION_LIST("nkey")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 26200.0;
	}
}

TRANSITION_LIST("nrst")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 458.5;
		LEVEL 1 FOR 25741.5;
	}
}

TRANSITION_LIST("num[11]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 24244.8;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 645.2;
	}
}

TRANSITION_LIST("num[10]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 26200.0;
	}
}

TRANSITION_LIST("num[9]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 22932.932;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 647.068;
	}
}

TRANSITION_LIST("num[8]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 16383.346;
		LEVEL 1 FOR 2619.472;
		LEVEL 0 FOR 2620.0;
		LEVEL 1 FOR 3930.528;
		LEVEL 0 FOR 646.654;
	}
}

TRANSITION_LIST("num[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 22933.256;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 1956.744;
	}
}

TRANSITION_LIST("num[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 26200.0;
	}
}

TRANSITION_LIST("num[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 16383.18;
		LEVEL 1 FOR 2619.938;
		LEVEL 0 FOR 2620.0;
		LEVEL 1 FOR 1310.062;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 646.82;
	}
}

TRANSITION_LIST("num[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 15074.898;
		LEVEL 1 FOR 9170.0;
		LEVEL 0 FOR 1955.102;
	}
}

TRANSITION_LIST("num[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 16383.87;
		LEVEL 1 FOR 2618.802;
		LEVEL 0 FOR 2620.0;
		LEVEL 1 FOR 1311.198;
		LEVEL 0 FOR 3266.13;
	}
}

TRANSITION_LIST("num[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 26200.0;
	}
}

TRANSITION_LIST("num[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 15073.939;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 6550.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 1956.061;
	}
}

TRANSITION_LIST("num[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 13764.4;
		LEVEL 1 FOR 5238.233;
		LEVEL 0 FOR 2620.0;
		LEVEL 1 FOR 1311.767;
		LEVEL 0 FOR 3265.6;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "nrst";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "nkey";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "keycode";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
	CHILDREN = 4, 5, 6, 7;
}

DISPLAY_LINE
{
	CHANNEL = "keycode[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "keycode[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "keycode[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "keycode[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "comp";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 0;
	CHILDREN = 9, 10, 11;
}

DISPLAY_LINE
{
	CHANNEL = "comp[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "comp[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "comp[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 8;
}

DISPLAY_LINE
{
	CHANNEL = "num";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 0;
	CHILDREN = 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24;
}

DISPLAY_LINE
{
	CHANNEL = "num[11]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "num[10]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "num[9]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "num[8]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "num[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "num[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "num[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "num[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "num[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "num[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "num[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 12;
}

DISPLAY_LINE
{
	CHANNEL = "num[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 12;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
