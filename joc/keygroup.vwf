/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	PRINT_OPTIONS = "Print_options_version 6\
range_start 0ps\
range_end 13.1us\
width 1\
names_percentage 25\
comments 1\
grid_lines 1\
time_bars 1\
name_every_page 0\
expand_groups 0\
print_all 1\
print_row_height 100";
	DATA_OFFSET = 0.0;
	DATA_DURATION = 13100.0;
	SIMULATION_TIME = 13100.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 1310.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("ast")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("bcd")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("coi")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("let")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("nkey")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("x")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("x[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "x";
}

SIGNAL("x[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "x";
}

SIGNAL("x[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "x";
}

SIGNAL("x[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "x";
}

TRANSITION_LIST("ast")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 5246.676;
		LEVEL 1 FOR 4.452;
		LEVEL 0 FOR 2618.173;
		LEVEL 1 FOR 1307.336;
		LEVEL 0 FOR 3923.363;
	}
}

TRANSITION_LIST("bcd")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1318.473;
		LEVEL 0 FOR 1314.467;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 3930.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 1297.06;
	}
}

TRANSITION_LIST("coi")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1316.698;
		LEVEL 1 FOR 1309.961;
		LEVEL 0 FOR 5240.039;
		LEVEL 1 FOR 2.621;
		LEVEL 0 FOR 2617.34;
		LEVEL 1 FOR 4.491;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 1298.85;
	}
}

TRANSITION_LIST("let")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1318.523;
		LEVEL 1 FOR 0.043;
		LEVEL 0 FOR 1309.957;
		LEVEL 1 FOR 4.495;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 1305.548;
		LEVEL 0 FOR 1314.452;
		LEVEL 1 FOR 1305.548;
		LEVEL 0 FOR 1309.957;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 2611.477;
	}
}

TRANSITION_LIST("nkey")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 13100.0;
	}
}

TRANSITION_LIST("x[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 2620.0;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 3930.0;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 1310.0;
	}
}

TRANSITION_LIST("x[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 2620.0;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 5240.0;
	}
}

TRANSITION_LIST("x[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 5240.0;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 2620.0;
	}
}

TRANSITION_LIST("x[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 3930.0;
		LEVEL 0 FOR 2620.0;
		LEVEL 1 FOR 1310.0;
		LEVEL 0 FOR 1310.0;
		LEVEL 1 FOR 3930.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "nkey";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "x";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5;
}

DISPLAY_LINE
{
	CHANNEL = "x[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "x[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "x[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "x[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "bcd";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ast";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "coi";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "let";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
